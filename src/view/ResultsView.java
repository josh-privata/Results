/*
 * Copyright (c) 2016, josh
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package view;

import results.Test;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import model.Result;
import model.ResultsQueries;

/**
 *
 * @author josh
 */
public class ResultsView extends javax.swing.JFrame {

    private ResultsQueries rq;
    private String textDisplayWindowMessage;
    private final String header = String.format("Student ID\tAssign 1\tAssign 2\tExam\tTotal\tGrade\n");

    /**
     * Creates new form NewJFrame
     */
    public ResultsView() {
        initComponents();

        // Initialise components
        rq = new ResultsQueries();
        textDisplayWindowMessage = "";

        // Creates database and fills with given test data
        Test test = new Test();

        // <<DEBUGGING TEST>>
        // Shown in output, does not affect application operation
        test.runTest();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        headingText = new javax.swing.JLabel();
        studentLabel = new javax.swing.JLabel();
        studentField = new javax.swing.JTextField();
        assignment1Label = new javax.swing.JLabel();
        assignment1Field = new javax.swing.JTextField();
        Assignment2Label = new javax.swing.JLabel();
        assignment2Field = new javax.swing.JTextField();
        examLabel = new javax.swing.JLabel();
        examField = new javax.swing.JTextField();
        totalLabel = new javax.swing.JLabel();
        totalField = new javax.swing.JTextField();
        gradeLabel = new javax.swing.JLabel();
        gradeField = new javax.swing.JTextField();
        testDisplayScrollPane = new javax.swing.JScrollPane();
        textDisplayWindow = new javax.swing.JTextArea();
        updateExamMarkButton = new javax.swing.JButton();
        queryAllStudentsButton = new javax.swing.JButton();
        queryStudentButton = new javax.swing.JButton();
        queryMarkRangeButton = new javax.swing.JButton();
        queryAbsentFailsButton = new javax.swing.JButton();
        clearTextButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        mark1Field = new javax.swing.JTextField();
        mark2Field = new javax.swing.JTextField();
        queryStudentField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("mainWindow"); // NOI18N
        setResizable(false);

        mainPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        headingText.setFont(new java.awt.Font("DejaVu Sans", 0, 24)); // NOI18N
        headingText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headingText.setText("Marks Management System");

        studentLabel.setText("Student #");
        studentLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        studentField.setToolTipText("Enter Student Number");

        assignment1Label.setText("Assignment 1");

        assignment1Field.setEditable(false);
        assignment1Field.setToolTipText("Enter Assignment 1 Mark");

        Assignment2Label.setText("Assignment 2");

        assignment2Field.setEditable(false);
        assignment2Field.setToolTipText("Assignment 2 Mark");

        examLabel.setText("Examination");

        examField.setToolTipText("Enter Examination Mark");

        totalLabel.setText("Total");

        totalField.setToolTipText("Enter Total Mark");

        gradeLabel.setText("Grade");
        gradeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        gradeField.setEditable(false);
        gradeField.setToolTipText("Enter Student Grade");

        textDisplayWindow.setColumns(20);
        textDisplayWindow.setRows(5);
        textDisplayWindow.setToolTipText("Display Test Shows Here");
        testDisplayScrollPane.setViewportView(textDisplayWindow);

        updateExamMarkButton.setText("Update Exam Mark");
        updateExamMarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateExamMarkButtonActionPerformed(evt);
            }
        });

        queryAllStudentsButton.setText("Query All Students");
        queryAllStudentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryAllStudentsButtonActionPerformed(evt);
            }
        });

        queryStudentButton.setText("Query Student");
        queryStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryStudentButtonActionPerformed(evt);
            }
        });

        queryMarkRangeButton.setText("Query Marks in Range");
        queryMarkRangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryMarkRangeButtonActionPerformed(evt);
            }
        });

        queryAbsentFailsButton.setText("Query Absent Fails");
        queryAbsentFailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryAbsentFailsButtonActionPerformed(evt);
            }
        });

        clearTextButton.setText("Clear Text");
        clearTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTextButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("Exit Program");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(queryMarkRangeButton)
                        .addGap(18, 18, 18)
                        .addComponent(mark1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mark2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(queryAbsentFailsButton)
                            .addComponent(queryStudentButton))
                        .addGap(18, 18, 18)
                        .addComponent(queryStudentField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ExitButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(clearTextButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(224, Short.MAX_VALUE)
                .addComponent(headingText, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(209, 209, 209))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(queryAllStudentsButton))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(examLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Assignment2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(assignment1Field, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                    .addComponent(assignment2Field)
                                    .addComponent(examField)
                                    .addComponent(totalField)))
                            .addComponent(updateExamMarkButton)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(gradeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(gradeField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(studentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(assignment1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(studentField, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(testDisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(headingText, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(assignment1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignment2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Assignment2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(examField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(examLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gradeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gradeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateExamMarkButton)
                .addGap(26, 26, 26)
                .addComponent(queryAllStudentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(queryAbsentFailsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(queryStudentButton)
                            .addComponent(queryStudentField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(queryMarkRangeButton)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(mark2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mark1Field, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearTextButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExitButton)
                        .addGap(31, 31, 31))))
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addGap(74, 74, 74)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(testDisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(studentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(studentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(assignment1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(96, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Close database connection and exit program
    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        try {
            System.out.println("[+] Attempting to close database connection");
            rq.con.close();
            System.out.println("[+] Database closed successfully");
        } catch (SQLException ex) {
            System.out.println("[-] Failed to close database");
        } finally {
            System.exit(1);
        }
    }//GEN-LAST:event_ExitButtonActionPerformed

    // Clear textDisplayWindow
    private void clearTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTextButtonActionPerformed
        String message = "";
        studentField.setText(message);
                    gradeField.setText(message);
                    assignment1Field.setText(message);
                    assignment2Field.setText(message);
                    examField.setText(message);
                    totalField.setText(message);
        textDisplayWindow.setText(message);
    }//GEN-LAST:event_clearTextButtonActionPerformed

    // Run getNumberOfAbsentFails Query and refresh textDisplayWindow
    private void queryAbsentFailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryAbsentFailsButtonActionPerformed
        textDisplayWindowMessage = "";
        textDisplayWindow.setText(textDisplayWindowMessage);
        try {

            textDisplayWindowMessage = "There are currently " + rq.getNumberOfAbsentFails()
                    + " absent fail results on record";
            textDisplayWindow.setText(textDisplayWindowMessage);
            System.out.println("[+] Succeded in running getNumberOfAbsentFails query");
        } catch (Exception e) {
            System.out.println("[-] Failed to run getNumberOfAbsentFails query");
        }
    }//GEN-LAST:event_queryAbsentFailsButtonActionPerformed

    // Run getTotalMarksInRange Query and refresh textDisplayWindow
    private void queryMarkRangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryMarkRangeButtonActionPerformed
        textDisplayWindowMessage = "";
        textDisplayWindow.setText(textDisplayWindowMessage);
        int mark1 = 0;
        int mark2 = 0;
        try {
            if (mark1Field.getText().equals("")) {
                //if (Integer.parseInt(mark1Field.getText()) <= 100){}
                System.out.println("[-] No input was found in mark1");
                String message = "Please make sure a valid mark number has been entered into the mark1 field.";
                JOptionPane.showMessageDialog(null, message);
            } else {
                mark1 = Integer.parseInt(mark1Field.getText());
                System.out.println("[+] Successfully got user input for mark1");
                if (mark2Field.getText().equals("")) {
                    System.out.println("[-] No input was found in mark2, trying mark1 instead");
                    mark2 = mark1;
                    System.out.println("[+] Successfully using input for mark1 as mark2");
                } else {
                    mark2 = Integer.parseInt(mark2Field.getText());
                    System.out.println("[+] Successfully got user input for mark2");
                    System.out.println("[+] Variable mark1 is " + mark1 + " and mark2 is " + mark2);
                }
                if (mark2 >= mark1) {
                    try {
                        System.out.println("[+] Attempting to run query using user input");
                        System.out.println("[+] Displaying query results to text display window");
                        textDisplayWindowMessage += header;
                        for (Result r : rq.getTotalMarksInRange(mark1, mark2)) {
                            textDisplayWindowMessage += r.toString();
                        }
                    } catch (Exception e) {
                        System.out.println("[-] Failed to run query");
                        textDisplayWindowMessage = "fail";
                    } finally {
                        textDisplayWindow.setText(textDisplayWindowMessage);
                    }
                } else {
                    System.out.println("[-] Error using input for mark1 as mark2");
                    JOptionPane.showMessageDialog(null,
                            "The input for Mark 2 must be greater than than Mark 1");
                }
            }
        } catch (Exception e) {
            String message = "Please make sure only numbers have been entered into the fields";
            JOptionPane.showMessageDialog(null, message);
        }
    }//GEN-LAST:event_queryMarkRangeButtonActionPerformed

    // Run getResultsForStudent Query and refresh textDisplayWindow
    private void queryStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryStudentButtonActionPerformed
        textDisplayWindowMessage = header;
        textDisplayWindow.setText(textDisplayWindowMessage);
        String student = null;
        if (queryStudentField.getText().equals("")) {
            String message = "Please make sure a valid Student ID number has been entered into the search field.";
            JOptionPane.showMessageDialog(null, message);
        } else {
            try {
                student = queryStudentField.getText();
                Result r = rq.getResultsForStudent(student);
                if (r.getStudent() != null) {
                    textDisplayWindowMessage += r.toString();
                    studentField.setText(r.getStudent());
                    gradeField.setText(r.getGrade());
                    assignment1Field.setText(Integer.toString(r.getAssignment1()));
                    assignment2Field.setText(Integer.toString(r.getAssignment2()));
                    examField.setText(Integer.toString(r.getExam()));
                    totalField.setText(Integer.toString(r.getTotal()));
                    System.out.println("[+] Succeded in running getResultsForStudent query");
                } else {
                    textDisplayWindowMessage = "No Results where found";
                }
            } catch (Exception e) {
                textDisplayWindowMessage = "fail";
                System.out.println("[-] Failed in running getResultsForStudent query");
            }
        }
        textDisplayWindow.setText(textDisplayWindowMessage);
    }//GEN-LAST:event_queryStudentButtonActionPerformed

    // Run getResultsForAllStudents Query and refresh textDisplayWindow
    private void queryAllStudentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryAllStudentsButtonActionPerformed
        textDisplayWindowMessage = header;
        textDisplayWindow.setText(textDisplayWindowMessage);
        try {
            for (Result r : rq.getResultsForAllStudents()) {
                textDisplayWindowMessage += r.toString();
            }
            textDisplayWindow.setText(textDisplayWindowMessage);
            System.out.println("[+] Succeded in running getResultsForAllStudents query");
        } catch (Exception e) {
            System.out.println("[-] Failed to run getResultsForAllStudents query");
        }
    }//GEN-LAST:event_queryAllStudentsButtonActionPerformed

    // Update database and refresh textDisplayWindow
    private void updateExamMarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateExamMarkButtonActionPerformed
        textDisplayWindowMessage = header;
        textDisplayWindow.setText(textDisplayWindowMessage);
        int exam;
        int total;
        String student;
        String message;

        if (!"".equals(studentField.getText())) {
            student = studentField.getText();
            if (!"".equals(examField.getText())) {
                exam = Integer.parseInt(examField.getText());
                if (!"".equals(totalField.getText())) {
                    total = Integer.parseInt(totalField.getText());
                    if (rq.getResultsForStudent(student).getStudent() != null) {
                        try {
                            rq.updateExamMark(student, exam, total);
                            textDisplayWindowMessage += rq.getResultsForStudent(student).toString();
                            textDisplayWindow.setText(textDisplayWindowMessage);
                            System.out.println("[+] Succedded in running updateExamMark query");
                        } catch (Exception e) {
                            System.out.println("[-] Failed to run updateExamMark query");
                        }
                    } else {
                        message = "The student has not been found. Please enter an existing student number";
                        JOptionPane.showMessageDialog(null, message);
                    }
                } else {
                    message = "Please make sure the student #, examination and total fields have been entered correctly";
                    JOptionPane.showMessageDialog(null, message);
                }
            } else {
                message = "Please make sure the student #, examination and total fields have been entered correctly";
                JOptionPane.showMessageDialog(null, message);
            }
        } else {
            message = "Please make sure the student #, examination and total fields have been entered correctly";
            JOptionPane.showMessageDialog(null, message);
        }

    }//GEN-LAST:event_updateExamMarkButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        // Set nimbus LAF
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResultsView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Assignment2Label;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTextField assignment1Field;
    private javax.swing.JLabel assignment1Label;
    private javax.swing.JTextField assignment2Field;
    private javax.swing.JButton clearTextButton;
    private javax.swing.JTextField examField;
    private javax.swing.JLabel examLabel;
    private javax.swing.JTextField gradeField;
    private javax.swing.JLabel gradeLabel;
    private javax.swing.JLabel headingText;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField mark1Field;
    private javax.swing.JTextField mark2Field;
    private javax.swing.JButton queryAbsentFailsButton;
    private javax.swing.JButton queryAllStudentsButton;
    private javax.swing.JButton queryMarkRangeButton;
    private javax.swing.JButton queryStudentButton;
    private javax.swing.JTextField queryStudentField;
    private javax.swing.JTextField studentField;
    private javax.swing.JLabel studentLabel;
    private javax.swing.JScrollPane testDisplayScrollPane;
    private javax.swing.JTextArea textDisplayWindow;
    private javax.swing.JTextField totalField;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JButton updateExamMarkButton;
    // End of variables declaration//GEN-END:variables
}
